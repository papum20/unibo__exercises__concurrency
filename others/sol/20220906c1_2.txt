Esercizio c.1: I bit di un numero intero rappresentano condizioni di un sistema. Se lo stato attuale è 6 (0110) vuole dire
che attualmente sono vere le condizioni 2 (0010) e 4 (0100).
Scrivere un monitor bitcond che fornisca le seguenti procedure entry:
void set(int bit2set); accende nello stato attuale i bit di bit2set
void unset(int bit2unset) spegne nello stato attuale i bit di bit2unset
void statuswait(int bit2wait) attende che lo stato attuale soddisfi tutti le condizioni indicate in bit2wait (cioè
che tutti i bit in bit2wait siano accesi nello stato attuale).
Le richieste statuswait devono essere servite in ordine FIFO (cioè un processo anche se sono presenti tutte le
condizioni necessarie deve attendere se un processo che ha chiamato statuswait prima è in attesa).
Lo stato iniziale è zero (nessuna risorsa disponibile)


// SOLUZIONE PROPOSTA


const int int_size = 32;

class monitor {
    int value;
    condition bitset[int_size];

    int numstatuswaiting;
    condition waiting;
    
    monitor() {
        value = 0;
    }
    
    /// guarda se il bit n-significativo è settato in from
    bool nbit(int from, int n) {
        return (from & (1 << n)) != 0
    }

    void entry set(int bit2set) {
        value |= bit2set;

        for (int i = 0; i < 32; i++) {
            if (nbit(value, i))
                bitset[i].signal();
        }
    }


    void entry unset(int bit2unset) {
        value = (value & ~bit2unset);
    }

    void entry statuswait(int bit2wait) {
        // in questo modo solamente un singolo processo è dentro ad aspettare
        // che tutte le condizioni siano rispettate
        if (numstatuswaiting > 0)
            waiting.wait();
        
        numstatuswaiting++;
        int i = 0;
        while(i < 32) {
            if (nbit(bit2wait, i) && !nbit(value, i)) {
                bitset[i].wait();

                // ricomincia a guardare tutti i bit da zero, perché
                // nel frattempo potrebbero essere cambiati.
                // -1 così con l'istruzione successiva diventa 0
                i = -1; 
            }
            i++;
        }
        
        numstatuswaiting--;
        waiting.signal();
    }
}
